// automatically generated by the FlatBuffers compiler, do not modify

namespace Protocol
{

using System;
using FlatBuffers;

public struct Player : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Player GetRootAsPlayer(ByteBuffer _bb) { return GetRootAsPlayer(_bb, new Player()); }
  public static Player GetRootAsPlayer(ByteBuffer _bb, Player obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Player __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Roomid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public short Roomkind { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public Job Jobkind { get { int o = __p.__offset(8); return o != 0 ? (Job)__p.bb.GetInt(o + __p.bb_pos) : Job.None; } }
  public Vec5? Pos { get { int o = __p.__offset(10); return o != 0 ? (Vec5?)(new Vec5()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Vec2? Rot { get { int o = __p.__offset(12); return o != 0 ? (Vec2?)(new Vec2()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Vec3? Aim { get { int o = __p.__offset(14); return o != 0 ? (Vec3?)(new Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public short Hp { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)100; } }
  public string Name { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(18); }
  public Color Team { get { int o = __p.__offset(20); return o != 0 ? (Color)__p.bb.GetInt(o + __p.bb_pos) : Color.Gray; } }
  public State State { get { int o = __p.__offset(22); return o != 0 ? (State)__p.bb.GetSbyte(o + __p.bb_pos) : State.Idle; } }
  public Weapon? Weapon { get { int o = __p.__offset(24); return o != 0 ? (Weapon?)(new Weapon()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public bool Shoot { get { int o = __p.__offset(26); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Ache { get { int o = __p.__offset(28); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string Killer { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetKillerBytes() { return __p.__vector_as_arraysegment(30); }
  public Ingame Game { get { int o = __p.__offset(32); return o != 0 ? (Ingame)__p.bb.GetSbyte(o + __p.bb_pos) : Ingame.None; } }
  public float Time { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static void StartPlayer(FlatBufferBuilder builder) { builder.StartObject(16); }
  public static void AddRoomid(FlatBufferBuilder builder, int roomid) { builder.AddInt(0, roomid, 0); }
  public static void AddRoomkind(FlatBufferBuilder builder, short roomkind) { builder.AddShort(1, roomkind, 0); }
  public static void AddJobkind(FlatBufferBuilder builder, Job jobkind) { builder.AddInt(2, (int)jobkind, 0); }
  public static void AddPos(FlatBufferBuilder builder, Offset<Vec5> posOffset) { builder.AddStruct(3, posOffset.Value, 0); }
  public static void AddRot(FlatBufferBuilder builder, Offset<Vec2> rotOffset) { builder.AddStruct(4, rotOffset.Value, 0); }
  public static void AddAim(FlatBufferBuilder builder, Offset<Vec3> aimOffset) { builder.AddStruct(5, aimOffset.Value, 0); }
  public static void AddHp(FlatBufferBuilder builder, short hp) { builder.AddShort(6, hp, 100); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(7, nameOffset.Value, 0); }
  public static void AddTeam(FlatBufferBuilder builder, Color team) { builder.AddInt(8, (int)team, 0); }
  public static void AddState(FlatBufferBuilder builder, State state) { builder.AddSbyte(9, (sbyte)state, 0); }
  public static void AddWeapon(FlatBufferBuilder builder, Offset<Weapon> weaponOffset) { builder.AddOffset(10, weaponOffset.Value, 0); }
  public static void AddShoot(FlatBufferBuilder builder, bool shoot) { builder.AddBool(11, shoot, false); }
  public static void AddAche(FlatBufferBuilder builder, bool ache) { builder.AddBool(12, ache, false); }
  public static void AddKiller(FlatBufferBuilder builder, StringOffset killerOffset) { builder.AddOffset(13, killerOffset.Value, 0); }
  public static void AddGame(FlatBufferBuilder builder, Ingame game) { builder.AddSbyte(14, (sbyte)game, 0); }
  public static void AddTime(FlatBufferBuilder builder, float time) { builder.AddFloat(15, time, 0.0f); }
  public static Offset<Player> EndPlayer(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Player>(o);
  }
  public static void FinishPlayerBuffer(FlatBufferBuilder builder, Offset<Player> offset) { builder.Finish(offset.Value); }
};


}
