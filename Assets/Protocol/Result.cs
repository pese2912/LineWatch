// automatically generated by the FlatBuffers compiler, do not modify

namespace Protocol
{

using System;
using FlatBuffers;

public struct Result : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Result GetRootAsResult(ByteBuffer _bb) { return GetRootAsResult(_bb, new Result()); }
  public static Result GetRootAsResult(ByteBuffer _bb, Result obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Result __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Color Win { get { int o = __p.__offset(4); return o != 0 ? (Color)__p.bb.GetInt(o + __p.bb_pos) : Color.Gray; } }
  public Player_result? Redteam(int j) { int o = __p.__offset(6); return o != 0 ? (Player_result?)(new Player_result()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RedteamLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Player_result? Blueteam(int j) { int o = __p.__offset(8); return o != 0 ? (Player_result?)(new Player_result()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int BlueteamLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Mvp { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetMvpBytes() { return __p.__vector_as_arraysegment(10); }

  public static Offset<Result> CreateResult(FlatBufferBuilder builder,
      Color Win = Color.Gray,
      VectorOffset RedteamOffset = default(VectorOffset),
      VectorOffset BlueteamOffset = default(VectorOffset),
      StringOffset mvpOffset = default(StringOffset)) {
    builder.StartObject(4);
    Result.AddMvp(builder, mvpOffset);
    Result.AddBlueteam(builder, BlueteamOffset);
    Result.AddRedteam(builder, RedteamOffset);
    Result.AddWin(builder, Win);
    return Result.EndResult(builder);
  }

  public static void StartResult(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddWin(FlatBufferBuilder builder, Color Win) { builder.AddInt(0, (int)Win, 0); }
  public static void AddRedteam(FlatBufferBuilder builder, VectorOffset RedteamOffset) { builder.AddOffset(1, RedteamOffset.Value, 0); }
  public static VectorOffset CreateRedteamVector(FlatBufferBuilder builder, Offset<Player_result>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartRedteamVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBlueteam(FlatBufferBuilder builder, VectorOffset BlueteamOffset) { builder.AddOffset(2, BlueteamOffset.Value, 0); }
  public static VectorOffset CreateBlueteamVector(FlatBufferBuilder builder, Offset<Player_result>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartBlueteamVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMvp(FlatBufferBuilder builder, StringOffset mvpOffset) { builder.AddOffset(3, mvpOffset.Value, 0); }
  public static Offset<Result> EndResult(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Result>(o);
  }
};


}
