// automatically generated by the FlatBuffers compiler, do not modify

namespace Protocol
{

using System;
using FlatBuffers;

public struct Weapon : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Weapon GetRootAsWeapon(ByteBuffer _bb) { return GetRootAsWeapon(_bb, new Weapon()); }
  public static Weapon GetRootAsWeapon(ByteBuffer _bb, Weapon obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Weapon __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public WepId Id { get { int o = __p.__offset(4); return o != 0 ? (WepId)__p.bb.GetInt(o + __p.bb_pos) : WepId.None; } }
  public short Damage { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public int Velocity { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Range { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Weapon> CreateWeapon(FlatBufferBuilder builder,
      WepId id = WepId.None,
      short damage = 0,
      int velocity = 0,
      int range = 0) {
    builder.StartObject(4);
    Weapon.AddRange(builder, range);
    Weapon.AddVelocity(builder, velocity);
    Weapon.AddId(builder, id);
    Weapon.AddDamage(builder, damage);
    return Weapon.EndWeapon(builder);
  }

  public static void StartWeapon(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddId(FlatBufferBuilder builder, WepId id) { builder.AddInt(0, (int)id, 0); }
  public static void AddDamage(FlatBufferBuilder builder, short damage) { builder.AddShort(1, damage, 0); }
  public static void AddVelocity(FlatBufferBuilder builder, int velocity) { builder.AddInt(2, velocity, 0); }
  public static void AddRange(FlatBufferBuilder builder, int range) { builder.AddInt(3, range, 0); }
  public static Offset<Weapon> EndWeapon(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Weapon>(o);
  }
};


}
